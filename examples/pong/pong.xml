<gdml_script>
extends Node2D

func _ready():
    Physics2DServer.area_set_param(get_world_2d().space, Physics2DServer.AREA_PARAM_GRAVITY_VECTOR, Vector2.ZERO)
    queue_free()
</gdml_script>
<gdml_script gdml_name="Paddle" gdml_temp="true">
extends Area2D

const Side := {
    "NONE": "none",
    "LEFT": "left",
    "RIGHT": "right"
}

var side: String = Side.NONE

var up: int
var down: int

func _ready():
    var cs = CollisionShape2D.new()
    var rect = RectangleShape2D.new()
    rect.extents = Vector2(32, 32)
    cs.shape = rect
    add_child(cs)

    var sprite = Sprite.new()
    var image = Image.new()
    <!-- TODO make this portable aka not a res path -->
    image.load("res://icon.png")
    var image_texture = ImageTexture.new()
    image_texture.create_from_image(image)
    sprite.texture = image_texture
    add_child(sprite)

    scale.y = 3
    match side:
        Side.LEFT:
            up = KEY_W
            down = KEY_S
        Side.RIGHT:
            up = KEY_UP
            down = KEY_DOWN
        _:
            push_error("No side set")

    connect("body_entered", self, "_on_body_entered")

func _physics_process(delta):
    if Input.is_key_pressed(up):
        position.y -= 10
    if Input.is_key_pressed(down):
        position.y += 10

func _on_body_entered(body):
    if body.name != "Ball":
        return
    body.linear_velocity = Vector2.ZERO
    body.apply_central_impulse(Vector2(rand_range(300, 150) * (-1 if side == Side.RIGHT else 1), rand_range(-300, 300)))

</gdml_script>
<gdml_script gdml_name="Wall" gdml_temp="true">
extends Area2D

const Side := {
    "NONE": "none",
    "TOP": "top",
    "BOTTOM": "bottom"
}

var side: String = Side.NONE

func _ready():
    var cs = CollisionShape2D.new()
    var rect = RectangleShape2D.new()
    rect.extents = Vector2(32, 32)
    cs.shape = rect
    add_child(cs)

    var sprite = Sprite.new()
    var image = Image.new()
    <!-- TODO make this portable aka not a res path -->
    image.load("res://icon.png")
    var image_texture = ImageTexture.new()
    image_texture.create_from_image(image)
    sprite.texture = image_texture
    add_child(sprite)

    scale.x = 20

    connect("body_entered", self, "_on_body_entered")

    print("matching side")
    match side:
        Side.TOP:
            position.y = -get_viewport().size.y / 2
        Side.BOTTOM:
            position.y = get_viewport().size.y / 2
        _:
            push_error("Bad side for wall %s" % side)

func _on_body_entered(body):
    if body.name != "Ball":
        return
    
    body.linear_velocity.y *= rand_range(-1, -3)

</gdml_script>

<canvas_layer>
    <gdml gdml_style="anchor_left: 0.5; anchor_top: 0.5;size_flags_horizontal: (int) 3; size_flags_vertical: (int) 3;">
        <label gdml_style="align: (int) 1" gdml_name="ScoreDisplay">
            <gdml_script>
extends Label

func _ready():
    var tree = get_tree()
    yield(tree, "idle_frame")

    var ball_vis = tree.root.find_node("BallVis", true, false)
    ball_vis.connect("screen_exited", self, "_on_vis_exit")

func _on_vis_exit() -> void:
    text = "ball is gone!"

            </gdml_script>
            score placeholder
        </label>
    </gdml>
</canvas_layer>

<camera_2D gdml_props="current: true"/>
<area_2d gdml_name="LeftPaddle" gdml_props="position:x: -200; side: left" gdml_src="Paddle"/>
<area_2d gdml_name="RightPaddle" gdml_props="position:x:  200; side: right" gdml_source="Paddle">
</area_2d>
<rigid_body_2D gdml_name="Ball">
    <visibility_notifier_2D gdml_name="BallVis"/>
    <gdml_script>
extends RigidBody2D

func _ready():
    yield(get_tree(), "idle_frame")
    var cs = CollisionShape2D.new()
    var rect = RectangleShape2D.new()
    rect.extents = Vector2(32, 32)
    cs.shape = rect
    add_child(cs)

    var pm = PhysicsMaterial.new()
    pm.friction = 0.0
    pm.bounce = 1.0

    physics_material_override = pm

    var sprite = Sprite.new()
    var image = Image.new()
    image.load("res://icon.png")
    var image_texture = ImageTexture.new()
    image_texture.create_from_image(image)
    sprite.texture = image_texture
    add_child(sprite)

    apply_central_impulse(Vector2(-200, 0))

    </gdml_script>
</rigid_body_2D>

<area_2d gdml_name="TopWall" gdml_src="Wall" gdml_style="side: top"/>
<area_2d gdml_name="BottomWall" gdml_src="Wall" gdml_style="side: bottom"/>