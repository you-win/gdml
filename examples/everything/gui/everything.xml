<gdml_script>
    extends Reference

    func _init():
        print("root level script")
</gdml_script>
<gdml gdml_style="anchor_left: 0.5; anchor_right: 1.0; anchor_top: 0.1; anchor_bottom: 1.0">
    <gdml_script gdml_src="test_script.gd"/>
    <gdml_script gdml_name="builtin_script">
<!-- An example of how formatting is not necessary, although it might break your editor's code folding -->
func _on_pressed():
    print("not expected")
    </gdml_script>
    <gdml_script gdml_src="test_script.gd" gdml_name="test_script2">
        <gdml_script>
            extends Reference

            func _init():
                print("hello nested script")
        </gdml_script>
    </gdml_script>
    <gdml_script gdml_name="button_script">
        extends Button

        var test_var_button: int = 1
    </gdml_script>
    <gdml_style>
        Button {
            --colors-font-color: #000;
            --colors-font-color-disabled: Color(0, 0, 0, 0.5);

            --const-hseparation: 5;

            --styles-normal-type: Flat;
            --styles-normal-bg-color: #fff;
        }
        Button.test {
            --const-hseparation: 10;
        }
        VBoxContainer {
            background: #333
        }
    </gdml_style>
    <count_up gdml_props="rect_position:x: 100"/>
    <count_backwards gdml_props="rect_position:x: 200"/>
    <text_xml gdml_name="text_xml"/>
    <v_box_container gdml_style="anchor:full_rect">
        <gdml_script>
            extends VBoxContainer

            var test_val = 1

            func _ready():
                print("hello vbox")
        </gdml_script>
        <label>1</label>
        <label>2</label>
        <v_box_container>
            <label>inner</label>
            <button
                pressed="builtin_script._on_pressed(self, (int) 1, 'string', builtin_script.test_var, test_script2)"
                button_down="gives_true"
            >
                hello
            </button>
            <button pressed="_other_pressed">hello 2</button>
            <button gdml_src="button_script">using button_script</button>
        </v_box_container>
        <gdml gdml_name="loaded" gdml_src="loaded_gdml.gdml"/>
        <label>3</label>
    </v_box_container>
    <gdml gdml_style="anchor: full_rect">
        <button gdml_src="button_script">Inner</button>
        <reference gdml_style="anchor: full_rect"/>
        <gdml gdml_style="anchor: full_rect">
            <button gdml_src="button_script">Inner</button>
            <reference gdml_style="anchor: full_rect"/>
            <gdml gdml_style="anchor: full_rect">
                <button gdml_src="button_script">Inner</button>
                <reference gdml_style="anchor: full_rect"/>
            </gdml>
        </gdml>
    </gdml>

    <gdml_script>
        func gives_true() -> bool:
            print("true")
            return true
    </gdml_script>
    <gdml_script gdml_name="builtin_script">
        extends Node

        class WrappedInt:
            var i = 2

            func _to_string():
                return str(i)

        var test_var = WrappedInt.new()

        func _ready():
            print_debug(get_meta("__parent__"))

        func _process(delta):
            pass

        func add_one(x):
            return x + 1

        func _on_pressed(a, b, c, d, e):
            test_var.i += 1
            print("%s %d %s %s %s" % [a, b, c, str(d), e.give_test(test_var.i)])

        func _other_pressed():
            print("other")

    </gdml_script>
</gdml>

<gdml>
    <button
        gdml_name="margin_test"
        gdml_style="
            margin: 100;
            custom_colors/font_color: (colorN) Red;
        "
    >
        margin test
    </button>
    <label gdml_name="HelloLabel" gdml_style="anchor: 0.3; modulate: (color)#ffb2d90a">Hello</label>
</gdml>
